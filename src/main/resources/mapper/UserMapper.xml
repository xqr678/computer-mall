<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace属性作用:用于指定当前的映射文件和哪个接口进行映射，需要指定接口的文件路径，需要标注包的完整路径接口-->
<mapper namespace="com.cy.store.mapper.UserMapper">
<!--    自定义映射规则：resultMap标签来完成映射规则的定义
        id属性：标签给这个映射负责分配一个唯一的id值，对应的就是resultMap=”id属性的值“属性的取值
        type属性：取值一个类，表示的是数据库中的查询结果与java中哪个实体类进行结果集的映射-->
    <resultMap id="UserEntityMap" type="com.cy.store.entity.User">
<!--将表的字段和类的属性不一致的字段进行匹配指定，名称一致的字段可以省略不写-->
<!--配合完成名称不一致的映射
column属性：表示表中的资源名称
property属性：表示类中的属性名称-->
            <id column="uid" property="uid"/>
            <result column="is_delete" property="isDelete"/>
            <result column="created_user" property="createdUser"/>
            <result column="created_time" property="createdTime"/>
            <result column="modified_user" property="modifiedUser"/>
            <result column="modified_time" property="modifiedTime"/>
    </resultMap>

<!--    id属性：表示映射的接口方法的名称，直接在标签的内部都来编写SQL语句-->
<!--    userGeneratedKeys属性：表示开启某个字段的值递增（主键设置为递增） keyProperty属性：将表中的哪个字段作为主键进行递增-->
    <!-- 插入用户数据：Integer insert(User user) -->
    <insert id="insert" useGeneratedKeys="true" keyProperty="uid">
        INSERT INTO
            t_user (username, password, salt, phone, email, gender, avatar, is_delete, created_user, created_time, modified_user, modified_time)
        VALUES
            (#{username}, #{password}, #{salt}, #{phone}, #{email}, #{gender}, #{avatar}, #{isDelete}, #{createdUser}, #{createdTime}, #{modifiedUser}, #{modifiedTime})
    </insert>

<!--    select语句在执行时候，查询的结果是一个对象，多个对象。-->
<!--    resultType：表示查询的结果集类型，只需要指定对应映射类的类型，并且包含完整包接口
        resultMap:当表的字段和类的对象属性的字段名称不一致时，来自定义查询结果集的映射规则-->
    <select id="findByUsername" resultMap="UserEntityMap">
        SELECT * FROM t_user WHERE username = #{username}
    </select>

    <update id="updatePasswordByUid">
        UPDATE t_user SET
            password = #{password},
            modified_user = #{modifiedUser},
            modified_time = #{modifiedTime}
        WHERE uid = #{uid}
    </update>

    <select id="findByUid" resultMap="UserEntityMap">
        SELECT * FROM t_user WHERE uid = #{uid}
    </select>

    <update id="updateInfoByUid">
        UPDATE t_user
            SET
                <if test="phone!=null">phone=#{phone},</if>
                <if test="email!=null">email=#{email},</if>
                <if test="gender!=null">gender=#{gender},</if>
                modified_user=#{modifiedUser},
                modified_time=#{modifiedTime}
        WHERE uid=#{uid}
    </update>

    <update id="updateAvatarByUid">
        UPDATE t_user
            SET
                avatar=#{avatar},
                modified_user=#{modifiedUser},
                modified_time=#{modifiedTime}
            WHERE uid=#{uid}
    </update>

</mapper>